[Simulation]
simulation_time_ns = 0
freq_charge_update_fs = 200
freq_traj_output_ps = 10
voltage = 4.0

# simulation_type: Constant_V or MC_equil 
simulation_type = Constant_V

# platform: Reference, CPU, and CUDA are supported.
platform = CUDA

# MM version: original, optimized, cython, plugin 
# - original: 原始版本 (慢但穩定)
# - optimized: NumPy 向量化優化版 (1.5-2x 加速)
# - cython: Cython 編譯優化版 (2-5x 加速, 推薦!)
# - plugin: OpenMM C++ Plugin (Reference: 2-3x, CUDA: 10-20x, 需要編譯!)
mm_version = original

# ========== Warm Start 優化 (beta) (僅 cython 版本支持) ==========
# 
# 🚀 基本設定:
# enable_warmstart: True=啟用, False=完全禁用
enable_warmstart = False
# verify_interval: 每 N 次驗證一次 (防止誤差累積)
verify_interval = 50

# ⏰ 延遲啟動 (選擇其中一種方式):
#
# 方式 A: 用時間控制 (推薦!) 👈 當前使用
# warmstart_after_ns: 前 N ns 用 cold start (equilibration)
#                     0 = 立即啟用 (已平衡系統)
warmstart_after_ns = 100
#
# 方式 B: 用 frame 控制 (只有當 warmstart_after_ns = 0 時才生效)
# warmstart_after_frames: 0 = 不使用 frame 控制
#                         100 = 前 100 個 frame 用 cold start
warmstart_after_frames = 0
#
# 📌 注意: warmstart_after_ns > 0 時,會自動忽略 warmstart_after_frames
#
# 💡 快速使用指南:
#   從頭模擬:      warmstart_after_ns = 10  (前 10ns equilibration)
#   已平衡系統:    warmstart_after_ns = 0   (立即啟用)
#   完全禁用:      enable_warmstart = False
# ============================================================

# ========== Logging Mode (Logging 模式) ==========
# 'efficient': (推薦) 高效能模式。使用 StateDataReporter，將數據寫入 .log 檔案。
# 'legacy_print': (僅供除錯) 原始模式。每 10ps 就印出所有能量到終端機。效能極低！
logging_mode = efficient

# 'efficient' 模式下的額外設定:
# (您原本就有的 write_charges 旗標)
write_charges = False

# 是否寫入詳細的能量分項 (Bond, Angle...) 到 components.log
# 警告：僅作用於efficient模式，這仍會拖慢效能，但比 'legacy_print' 好得多。
write_components = False

[Validation]
# 是否啟用 A/B 驗證（僅在 mm_version=plugin 時有效）
enable = true
# 每隔多少次 charge 更新執行一次驗證（以 Poisson 調用次數為單位）
interval = 50
# 允許的電荷最大絕對誤差（每原子，單位：|e|）
tol_charge = 5e-4
# 允許的能量相對誤差（totalEnergy 或各 group energy，相對值）
tol_energy_rel = 5e-4
# 可選：明確指定 plugin 目錄（若留空則嘗試從 CONDA_PREFIX/lib/plugins 搜尋）
plugin_dir = 

[Physics]
# 固定電壓 Poisson 疊代次數（與原始碼等價預設為 4）
iterations = 4
# 是否以能量/電荷收斂提前停止（預設關閉以保等價）
enable_convergence = false
# 收斂判準：連續兩次總能量相對變化門檻
convergence_tol_energy_rel = 1e-6
# 收斂判準：單步最大電極原子電荷變化門檻
convergence_tol_charge = 1e-6
# 每輪都執行解析總電荷歸一化（與原始碼等價為 true）
enforce_analytic_scaling_each_iter = true
# 啟用不變量檢查（Q_analytic 比例、縮放後殘差）；失敗直接退出
verify_invariants = false
invariants_tol_charge = 1e-6

[Files]
outPath = 4v_20ns/
ffdir = ./ffdir/
pdb_file = for_openmm.pdb
; 使用逗號分隔多個檔案
residue_xml_list = sapt_residues.xml, graph_residue_c.xml, graph_residue_n.xml
ff_xml_list = sapt_noDB_2sheets.xml, graph_c_freeze.xml, graph_n_freeze.xml

[Electrodes]
; 使用逗號分隔元組(tuple)中的索引
cathode_index = 0,2
anode_index = 1,3
