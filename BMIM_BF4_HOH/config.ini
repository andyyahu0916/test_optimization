[Simulation]
simulation_time_ns = 0.02
freq_charge_update_fs = 200
freq_traj_output_ps = 10
voltage = 4.0

# simulation_type: Constant_V or MC_equil 
simulation_type = Constant_V

# platform: Reference, CPU, and CUDA are supported.
platform = CPU

# MM version: 'cython' for the fastest version, 'optimized' for the pure Python/NumPy version.
mm_version = cython

# ========== Logging Mode (Logging 模式) ==========
# 'efficient': (推薦) 高效能模式。使用 StateDataReporter，將數據寫入 .log 檔案。
# 'legacy_print': (僅供除錯) 原始模式。每 10ps 就印出所有能量到終端機。效能極低！
logging_mode = legacy_print

# 'efficient' 模式下的額外設定:
# (您原本就有的 write_charges 旗標)
write_charges = True

# 是否寫入詳細的能量分項 (Bond, Angle...) 到 components.log
# 警告：僅作用於efficient模式，這仍會拖慢效能，但比 'legacy_print' 好得多。
write_components = False

[Files]
outPath = 4v_20ns/
ffdir = ./ffdir/
pdb_file = for_openmm.pdb
; 使用逗號分隔多個檔案
residue_xml_list = sapt_residues.xml, graph_residue_c.xml, graph_residue_n.xml
ff_xml_list = sapt_noDB_2sheets.xml, graph_c_freeze.xml, graph_n_freeze.xml

[Electrodes]
; 使用逗號分隔元組(tuple)中的索引
cathode_index = 0,2
anode_index = 1,3
